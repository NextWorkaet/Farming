local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
wait(1)
vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)



pcall(function()
    print('script is starting!')
    task.wait(10)
    function button_click (button_obj)
        local events = {"MouseButton1Down", "MouseButton1Click", "Activated"}
        
        for i,v in pairs(events) do
            for _,connection in pairs(getconnections(button_obj[v])) do
                pcall(function ()
                    connection:Fire()
                end)
            end
        end
    end
    
    print("Assets load!‚úÖ")
    local Button = game:GetService("Players").LocalPlayer.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton
    button_click(Button)
    print('play button click‚úÖ')
    local function rename(remotename,hashedremote)
        hashedremote.Name = remotename
    end
    
    table.foreach(getupvalue(require(game:GetService("ReplicatedStorage"):WaitForChild("Fsys")).load("RouterClient").init, 7),rename)
    print('Remotes Dehashed!‚úÖ')
    local DailyRewardGUI = game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("DailyLoginAPI/ClaimDailyReward"):InvokeServer()
    print('Daily gift claimed!üéÅ')
    local DailyRewardCloseButton = game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Frame.Body.Buttons.ClaimButton
    task.wait(3)
    if DailyRewardGUI.Enabled == true then
        button_click(DailyRewardCloseButton)
    end
end)

local RunService = game:GetService("RunService")
local Tasks = {
    "pet_me",
    "hungry",
    "thirsty",
    "sick",
    "sleepy",
    "dirty",
    "toilet",
    "bored",
    "salon",
    "school",
    "moon",
    "pizza_party",
    "play",
    "ride",
    "walk",
    "at_work",
    "camping",
    "beach_party"
}

local clientData = require(game.ReplicatedStorage.ClientModules.Core.ClientData)
local playerData = clientData.get_data()[tostring(game.Players.LocalPlayer)]

local function formatNumber(amount)
    if amount >= 1000000 then
        local millionPart = tostring(math.floor(amount/1000000))
        local remainder = tostring(math.floor((amount % 1000000) / 1000))
        return millionPart .. "." .. remainder .. "M"
    elseif amount >= 100000 then
        return tostring(math.floor(amount/1000)) .. "K"
    else
        return tostring(amount)
    end
end

local ScreenGUI = Instance.new("ScreenGui")
ScreenGUI.Name = "ScreenStats"
ScreenGUI.IgnoreGuiInset = true
ScreenGUI.DisplayOrder = 9999
ScreenGUI.ResetOnSpawn = false
ScreenGUI.Parent = game.Players.LocalPlayer.PlayerGui
local BackgroundFrame = Instance.new("Frame")
BackgroundFrame.Size = UDim2.new(1,0,1,0)
BackgroundFrame.BackgroundColor3 = Color3.fromRGB(1,1,1)
BackgroundFrame.Parent = ScreenGUI
local NicknameText = Instance.new("TextLabel")
NicknameText.Parent = BackgroundFrame
NicknameText.Name = "NicknameText"
NicknameText.Text = utf8.char(0x1F3B2)..' '..tostring(game.Players.LocalPlayer.Name)
NicknameText.TextSize = 80
NicknameText.TextColor3 = Color3.fromRGB(255,255,255)
NicknameText.Position = UDim2.new(0.5,0,0.2,0)
NicknameText.Font = Enum.Font.FredokaOne
local BucksesStat = Instance.new("TextLabel")
BucksesStat.Parent = BackgroundFrame
BucksesStat.Name = "BucksesStat"
BucksesStat.Text = utf8.char(0x1F4B0)..'...'
BucksesStat.TextSize = 100
BucksesStat.TextColor3 = Color3.fromRGB(48,255,29)
BucksesStat.Position = UDim2.new(0.3,0,0.4,0)
BucksesStat.Font = Enum.Font.FredokaOne
local PotionStat = Instance.new("TextLabel")
PotionStat.Parent = BackgroundFrame
PotionStat.Name = "PotionStat"
PotionStat.Text = utf8.char(0x1F9EA)..'...'
PotionStat.TextSize = 100
PotionStat.TextColor3 = Color3.fromRGB(24,255,125)
PotionStat.Position = UDim2.new(0.7,0,0.4,0)
PotionStat.Font = Enum.Font.FredokaOne
local TaskDetecter = Instance.new("TextLabel")
TaskDetecter.Parent = BackgroundFrame
TaskDetecter.Name = "TaskDetecter"
TaskDetecter.Text = "Task: ???"
TaskDetecter.TextSize = 100
TaskDetecter.TextColor3 = Color3.fromRGB(24,255,125)
TaskDetecter.Position = UDim2.new(0.5,0,0.85,0)
TaskDetecter.Font = Enum.Font.FredokaOne
local ClockTime = Instance.new("TextLabel")
ClockTime.Parent = BackgroundFrame
ClockTime.Name = "ClockTime"
ClockTime.Text = "‚è∞ "
ClockTime.TextSize = 100
ClockTime.TextColor3 = Color3.fromRGB(255,255,255)
ClockTime.Position = UDim2.new(0.5,0,0.65,0)
ClockTime.Font = Enum.Font.FredokaOne
local UIStrokeNickname = Instance.new("UIStroke")
UIStrokeNickname.Color = Color3.fromRGB(0,78,255)
UIStrokeNickname.Thickness = 3
UIStrokeNickname.Parent = NicknameText
local UIStrokeBuckses = Instance.new("UIStroke")
UIStrokeBuckses.Color = Color3.fromRGB(20,138,5)
UIStrokeBuckses.Thickness = 3
UIStrokeBuckses.Parent = BucksesStat
local UIStrokePotions = Instance.new("UIStroke")
UIStrokePotions.Color = Color3.fromRGB(10,138,52)
UIStrokePotions.Thickness = 3
UIStrokePotions.Parent = PotionStat
local UIStrokePotions = Instance.new("UIStroke")
UIStrokePotions.Color = Color3.fromRGB(10,138,52)
UIStrokePotions.Thickness = 3
UIStrokePotions.Parent = TaskDetecter
local UIStrokeTime = Instance.new("UIStroke")
UIStrokeTime.Color = Color3.fromRGB(252, 38, 38)
UIStrokeTime.Thickness = 3
UIStrokeTime.Parent = ClockTime

local RunService = game:GetService("RunService")
local Hours = 0
local Mins = 0
local Secs = 0
local lastMinute = 0
local startTime = tick()
local function onStepped()
    if math.floor(tick()-startTime) > lastMinute then
        lastMinute = math.floor(tick()-startTime)
        Secs = Secs + 1
        if Secs == 60 then
            Mins = Mins + 1
            Secs = 0
        end
        if Mins == 60 then
            Hours = Hours + 1
            Mins = 0
        end
        local Buckses = formatNumber(tonumber(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[tostring(game.Players.LocalPlayer)]["money"]))
        BucksesStat.Text = utf8.char(0x1F4B0)..' '..Buckses
        local Count = 0
        for num, i in pairs(playerData.inventory.food) do
            if i.kind == 'pet_age_potion' then
                Count = Count+1
            end
        end
        local Pots = formatNumber(tonumber(Count))
        PotionStat.Text = utf8.char(0x1F9EA)..' '..Pots
        ClockTime.Text = "‚è∞ "..string.format("%02d:%02d", Hours, Mins)
    end
end

RunService:BindToRenderStep("Stats", Enum.RenderPriority.Input.Value, onStepped)

----------------------------------------
function EquipLastPet_TeamBabies()
    local clientData = require(game.ReplicatedStorage.ClientModules.Core.ClientData)
    local playerData = clientData.get_data()[tostring(game.Players.LocalPlayer)]
    local AlmostAgePet = {0, ""}
    for num,i in pairs(playerData.inventory.pets) do
        if i.properties.age > AlmostAgePet[1] then
            AlmostAgePet[1] = i.properties.age
            AlmostAgePet[2] = i.unique
            _G.Pet = i.unique
            _G.PetKind = i.kind
        end
    end
    local args = {[1] = _G.Pet,[2] = {["use_sound_delay"] = false,["equip_as_last"] = false}}    
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(unpack(args))
    for num, i in pairs(playerData) do
        if num == 'team' then
            if i == 'Parents' then
                local args = {
                    [1] = "Babies",
                    [2] = {
                        ["dont_send_back_home"] = true,
                        ["source_for_logging"] = "avatar_editor"
                    }
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TeamAPI/ChooseTeam"):InvokeServer(unpack(args))            
            end
        end
    end
end
EquipLastPet_TeamBabies()
print("Current pet: "..tostring(_G.PetKind))
----------------------------------------
function GetFs()
    local BasicCrib = ""
    local ModernShower = ""
    local Toilet = ""
    local BoxLure = ""
    for num, i in pairs(workspace.HouseInteriors.furniture:GetDescendants()) do
        if i:FindFirstChild("BasicCrib") then
            BasicCrib = i:FindFirstChild("BasicCrib"):GetAttributes()["furniture_unique"]
        end
        if i:FindFirstChild("ModernShower") then
            ModernShower = i:FindFirstChild("ModernShower"):GetAttributes()["furniture_unique"]
        end
        if i:FindFirstChild("Toilet") then
            Toilet = i:FindFirstChild("Toilet"):GetAttributes()["furniture_unique"]
        end
        if i:FindFirstChild("Lures2023NormalLure") then
            BoxLure = i:FindFirstChild("Lures2023NormalLure"):GetAttributes()["furniture_unique"]
        end
    end
    if BasicCrib == "" then
        local args = {[1] = {[1] = {["kind"] = "basiccrib",["properties"] = {["cframe"] = CFrame.new(3.800048828125, 0, -24.5, 1, -3.82137093032941e-15, 8.742277657347586e-08, 3.82137093032941e-15, 1, 0, -8.742277657347586e-08, 0, 1)}}}}   
        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/BuyFurnitures"):InvokeServer(unpack(args))
        task.wait(1)
        for num, i in pairs(workspace.HouseInteriors.furniture:GetDescendants()) do
            if i:FindFirstChild("BasicCrib") then
                BasicCrib = i:FindFirstChild("BasicCrib"):GetAttributes()["furniture_unique"]
                print("‚úÖSuccess buying BasicCrib!‚úÖ - üõèÔ∏è"..BasicCrib)
            end
        end
    end
    if ModernShower == "" then
        local args = {[1] = {[1] = {["kind"] = "modernshower",["properties"] = {["cframe"] = CFrame.new(4.699951171875, 0, -18.599609375, 1, -3.82137093032941e-15, 8.742277657347586e-08, 3.82137093032941e-15, 1, 0, -8.742277657347586e-08, 0, 1)}}}}       
        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/BuyFurnitures"):InvokeServer(unpack(args))       
        task.wait(1)
        for num, i in pairs(workspace.HouseInteriors.furniture:GetDescendants()) do
            if i:FindFirstChild("ModernShower") then
                ModernShower = i:FindFirstChild("ModernShower"):GetAttributes()["furniture_unique"]
                print("‚úÖSuccess buying ModernShower!‚úÖ - üöø"..ModernShower)
            end
        end
    end
    if Toilet == "" then
        local args = {[1] = {[1] = {["kind"] = "toilet",["properties"] = {["cframe"] = CFrame.new(9.300048828125, 0, -26.2001953125, 1, -3.82137093032941e-15, 8.742277657347586e-08, 3.82137093032941e-15, 1, 0, -8.742277657347586e-08, 0, 1)}}}}        
        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/BuyFurnitures"):InvokeServer(unpack(args))
        
        task.wait(1)
        for num, i in pairs(workspace.HouseInteriors.furniture:GetDescendants()) do
            if i:FindFirstChild("Toilet") then
                Toilet = i:FindFirstChild("Toilet"):GetAttributes()["furniture_unique"]
                print("‚úÖSuccess buying Toilet!‚úÖ - üöΩ"..Toilet)
            end
        end
    end
    if BoxLure == "" then
        local args = {[1] = {[1] = {["kind"] = "lures_2023_normal_lure",["properties"] = {["cframe"] = CFrame.new(9.10009765625, 0, -21, 1, -3.82137093032941e-15, 8.742277657347586e-08, 3.82137093032941e-15, 1, 0, -8.742277657347586e-08, 0, 1)}}}}       
        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/BuyFurnitures"):InvokeServer(unpack(args))       
        task.wait(1)
        for num, i in pairs(workspace.HouseInteriors.furniture:GetDescendants()) do
            if i:FindFirstChild("Lures2023NormalLure") then
                Toilet = i:FindFirstChild("Lures2023NormalLure"):GetAttributes()["furniture_unique"]
                print("‚úÖSuccess buying BoxLure!‚úÖ - üì¶"..BoxLure)
            end
        end
    end
    return BasicCrib, ModernShower, Toilet, BoxLure
end
GetFs()
local BasicCrib, ModernShower, Toilet, BoxLure = GetFs()
print('Done find: '..'| üõèÔ∏è '..BasicCrib..' | '..'üöø '..ModernShower..' | '..'üöΩ '..Toilet..' |')
print('üì¶BoxLure: '..BoxLure)

function ActivateBoxLure()
    local args2 = {
        [1] = game:GetService("Players").LocalPlayer,
        [2] = BoxLure,
        [3] = "UseBlock",
        [4] = false,
        [5] = workspace:WaitForChild("PlayerCharacters"):WaitForChild(game.Players.LocalPlayer.Name)
    }          
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/ActivateFurniture"):InvokeServer(unpack(args2))
    for num, i in pairs(playerData.inventory.food) do
        if i.kind == 'lures_2023_campfire_cookies' then
            local args = {
                [1] = game:GetService("Players").LocalPlayer,
                [2] = BoxLure,
                [3] = "UseBlock",
                [4] = {
                    ["bait_unique"] = num
                },
                [5] = workspace:WaitForChild("PlayerCharacters"):WaitForChild(game.Players.LocalPlayer.Name)
            }
           
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/ActivateFurniture"):InvokeServer(unpack(args))
        end
    end
    print('Activate BoxLure is success!‚úÖ')
end
ActivateBoxLure()

----------------------------------------
function ActivateFurniture(f, method, mode)
    if mode == "pet" then
        local args = {
            [1] = game:GetService("Players").LocalPlayer,
            [2] = f,
            [3] = method,
            [4] = {
                ["cframe"] = game.Players.LocalPlayer.character.HumanoidRootPart.CFrame
            },
            [5] = game.workspace:WaitForChild("Pets"):GetChildren()[1]
        }

        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/ActivateFurniture"):InvokeServer(unpack(args))
    elseif mode == "baby" then
        local args = {
            [1] = game:GetService("Players").LocalPlayer,
            [2] = f,
            [3] = method,
            [4] = {
                ["cframe"] = game.Players.LocalPlayer.character.HumanoidRootPart.CFrame
            },
            [5] = workspace:WaitForChild("PlayerCharacters"):WaitForChild(game.Players.LocalPlayer.Name)
        }

        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("HousingAPI/ActivateFurniture"):InvokeServer(unpack(args))

    end
end
----------------------------------------
task.wait(2)
----------------------------------------
function HoldPet()
    local args = {
        [1] = game.workspace:WaitForChild("Pets"):GetChildren()[1] or game.workspace:WaitForChild("Pets"):FindFirstChild(_G.PetKind)
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("AdoptAPI/HoldBaby"):FireServer(unpack(args))
end
HoldPet()
----------------------------------------
function CreatePlatform(Name, SizeX, SizeY, SizeZ , PositionX, PositionY, PositionZ)
    if not workspace:FindFirstChild(Name) then
        local HRP = game.Players.LocalPlayer.character.HumanoidRootPart
        local Part = Instance.new('Part')
        Part.Name = Name
        Part.Anchored = true
        Part.Parent = workspace
        Part.Size = Vector3.new(SizeX, SizeY, SizeZ)
        Part.Position = Vector3.new(PositionX, PositionY,PositionZ)
        Part.Rotation = Vector3.new(90, 0, 0)
        Part.Transparency = 0.5
    end
end
CreatePlatform("CampingPlatform", 100, 100, 5, -20, 26, -1055)
CreatePlatform("BoredPlatform", 100, 100, 5, -410, 28, -1784)
CreatePlatform("BeachPlatform", 100, 100, 5, -602, 24, -1471)
CreatePlatform("MainPlatform", 200, 200, 5, -400, -150, -1545)
----------------------------------------
function DropPet()
    local args = {
        [1] = game.workspace:WaitForChild("Pets"):GetChildren()[1] or game.workspace:WaitForChild("Pets"):FindFirstChild(_G.PetKind)
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("AdoptAPI/EjectBaby"):FireServer(unpack(args))   
end
----------------------------------------
function Jump()
    local Humanoid = game.Players.LocalPlayer.character.Humanoid
    Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
end
Jump()
----------------------------------------
function TeleportToPlatform(NamePlatform)
    local Platform = workspace:FindFirstChild(NamePlatform)
    local HRP = game.Players.LocalPlayer.character.HumanoidRootPart
    if Platform then
        HRP.Anchored = true
        HRP.CFrame = Platform.CFrame + Vector3.new(0,10,0)
        HRP.Anchored = false
        Jump()
    end
end
TeleportToPlatform("MainPlatform")
function DownloadAPIWinterShow()
    local args = {
        [1] = "MainMap",
        [2] = game:GetService("Players").LocalPlayer,
        [3] = "Default"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("LocationAPI/SetLocation"):FireServer(unpack(args))
end
DownloadAPIWinterShow()
----------------------------------------
function ReEquipPet()
    pcall(function()
        local args = {
            [1] = _G.Pet,
            [2] = {
                ["use_sound_delay"] = true,
                ["equip_as_last"] = false
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Unequip"):InvokeServer(unpack(args))
        task.wait(.3)
        local args = {
            [1] = _G.Pet,
            [2] = {
                ["use_sound_delay"] = false,
                ["equip_as_last"] = false
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(unpack(args))
    end)
end
ReEquipPet()
----------------------------------------
function ClaimQuests()
    for num,i in pairs(playerData) do
        if num == 'quest_manager' then
            for num2,i2 in pairs(i) do
                if num2 == 'quests_cached' then
                    for num3,i3 in pairs(i2) do
                        local args = {
                            [1] = num3
                        }
                        
                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("QuestAPI/ClaimQuest"):InvokeServer(unpack(args))
                    end
                end
            end
        end
    end 
end
----------------------------------------
task.wait(3)
while true do
    pcall(function()
        EquipLastPet_TeamBabies()
        HoldPet()
        ClaimQuests()
        TaskDetecter.Text = "Task: ???"
        task.wait(1)
        for num, i in pairs(playerData) do
            if num == 'ailments_manager' then
                for num_2, i_2 in pairs(i) do
                    if num_2 == 'ailments' then
                        for num_3, i_3 in pairs(i_2) do
                            for num_pets, i_pets in pairs(i_3) do
                                if num_pets == 'dirty' then
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TaskDetecter.Text = "Task: Dirty"..utf8.char(0x1F6BF)
                                    ReEquipPet()
                                    task.wait(1)
                                    HoldPet()
                                    ActivateFurniture(ModernShower, "UseBlock", "pet")
                                    task.wait(10)
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'sleepy' then
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TaskDetecter.Text = "Task: Sleepy"..utf8.char(0x1F4A4)
                                    ReEquipPet()
                                    task.wait(1)
                                    HoldPet()
                                    ActivateFurniture(BasicCrib, "UseBlock", "pet")
                                    task.wait(15)
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'play' then
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TaskDetecter.Text = "Task: Play"..utf8.char(0x1F9B4)
                                    ReEquipPet()
                                    task.wait(1)
                                    for i = 1,3 do
                                        for num, i in pairs(playerData.inventory.toys) do
                                            if i.kind == 'squeaky_bone_default' then
                                                local a = 0
                                                local args = {[1] = "__Enum_PetObjectCreatorType_1",[2] = {["reaction_name"] = "ThrowToyReaction",["unique_id"] = num}}       
                                                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/CreatePetObject"):InvokeServer(unpack(args))
                                                repeat
                                                    wait(1)
                                                    a=+1
                                                    if a >= 20 then
                                                        break                                    
                                                    end
                                                until workspace.PetObjects:FindFirstChild("SqueakyBone")
                                                local args = {[1] = workspace:WaitForChild("Pets"):GetChildren()[1],[2] = workspace.PetObjects.SqueakyBone}
                                                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/GrabPetObject"):FireServer(unpack(args))
                                                task.wait(3)
                                            end                        
                                        end
                                    end
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'toilet' then
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TaskDetecter.Text = "Task: Toilet"..utf8.char(0x1F6BD)
                                    ReEquipPet()
                                    task.wait(1)
                                    HoldPet()
                                    ActivateFurniture(Toilet, "Seat1", "pet")
                                    task.wait(10)
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'hungry' then
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TaskDetecter.Text = "Task: Hungry"..utf8.char(0x1F374)
                                    ReEquipPet()
                                    task.wait(1)
                                    for num_4, i_4 in pairs(i_pets) do
                                        if num_4 == 'components' then
                                            if i_4.preference == nil then
                                                local args = {[1] = "food",[2] = "apple",[3] = {["buy_count"] = 1}}
                                                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
                                                task.wait(1)
                                                for num_apple, i_apple in pairs(playerData.inventory.food) do
                                                    if i_apple.kind == 'apple' then
                                                        local args = {[1] = "__Enum_PetObjectCreatorType_2",[2] = {["pet_unique"] = _G.Pet,["unique_id"] = num_apple}}
                                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/CreatePetObject"):InvokeServer(unpack(args))
                                                        local args = {[1] = workspace:WaitForChild("Pets"):GetChildren()[1],[2] = workspace.PetObjects:GetChildren()[1]}
                                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/GrabPetObject"):FireServer(unpack(args))
                                                        local args = {[1] = workspace.PetObjects:GetChildren()[1],[2] = _G.Pet}                                                       
                                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/ConsumeFoodObject"):FireServer(unpack(args))
                                                        break
                                                    end
                                                end
                                            elseif i_4.preference ~= nil then
                                                local args = {[1] = "food",[2] = i_4.preference.item_kind,[3] = {["buy_count"] = 1}}
                                                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
                                                for num_5, i_5 in pairs(playerData.inventory.food) do
                                                    if i_5.kind == i_4.preference.item_kind then
                                                        local args = {[1] = "__Enum_PetObjectCreatorType_2",[2] = {["pet_unique"] = _G.Pet,["unique_id"] = num_5}}
                                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/CreatePetObject"):InvokeServer(unpack(args))
                                                        local args = {[1] = workspace:WaitForChild("Pets"):GetChildren()[1],[2] = workspace.PetObjects:GetChildren()[1]}
                                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/GrabPetObject"):FireServer(unpack(args))
                                                        local args = {[1] = workspace.PetObjects:GetChildren()[1],[2] = _G.Pet}                                                       
                                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/ConsumeFoodObject"):FireServer(unpack(args))
                                                        break
                                                    end
                                                end
                                            end
                                        end
                                        task.wait(1)
                                    end
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'thirsty' then
                                    TaskDetecter.Text = "Task: Thirsty"..utf8.char(0x1F4A6)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    ReEquipPet()
                                    task.wait(1)
                                    for num_4, i_4 in pairs(i_pets) do
                                        if num_4 == 'components' then
                                            print(i_4.preference)
                                            if i_4.preference == nil then
                                                local args = {[1] = "food",[2] = "water",[3] = {["buy_count"] = 1}}
                                                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
                                                task.wait(1)
                                                for num_water, i_water in pairs(playerData.inventory.food) do
                                                    if i_water.kind == 'water' then
                                                        local args = {[1] = "__Enum_PetObjectCreatorType_2",[2] = {["pet_unique"] = _G.Pet,["unique_id"] = num_water}}
                                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/CreatePetObject"):InvokeServer(unpack(args))
                                                        local args = {[1] = workspace:WaitForChild("Pets"):GetChildren()[1],[2] = workspace.PetObjects:GetChildren()[1]}
                                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/GrabPetObject"):FireServer(unpack(args))
                                                        local args = {[1] = workspace.PetObjects:GetChildren()[1],[2] = _G.Pet}                                                       
                                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/ConsumeFoodObject"):FireServer(unpack(args))
                                                        break
                                                    end
                                                end
                                            elseif i_4.preference ~= nil then
                                                local args = {[1] = "food",[2] = i_4.preference.item_kind,[3] = {["buy_count"] = 1}}
                                                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
                                                for num_5, i_5 in pairs(playerData.inventory.food) do
                                                    if i_5.kind == i_4.preference.item_kind then
                                                        local args = {[1] = "__Enum_PetObjectCreatorType_2",[2] = {["pet_unique"] = _G.Pet,["unique_id"] = num_5}}
                                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/CreatePetObject"):InvokeServer(unpack(args))
                                                        local args = {[1] = workspace:WaitForChild("Pets"):GetChildren()[1],[2] = workspace.PetObjects:GetChildren()[1]}
                                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/GrabPetObject"):FireServer(unpack(args))
                                                        local args = {[1] = workspace.PetObjects:GetChildren()[1],[2] = _G.Pet}                                                       
                                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/ConsumeFoodObject"):FireServer(unpack(args))
                                                        break
                                                    end
                                                end
                                            end
                                        end
                                        task.wait(1)
                                    end
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'pizza_party' then
                                    TaskDetecter.Text = "Task: Pizza party"..utf8.char(0x1F355)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TeleportToPlatform("MainPlatform")
                                    ReEquipPet()
                                    task.wait(1)
                                    HoldPet()
                                    local args = {
                                        [1] = "PizzaShop"
                                    }
                                    
                                    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("LocationAPI/SetLocation"):FireServer(unpack(args))
                                    task.wait(50)
                                    DownloadAPIWinterShow()
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'sick' then
                                    TaskDetecter.Text = "Task: Sick"..utf8.char(0x1F637)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    ReEquipPet()
                                    task.wait(1)
                                    local args = {[1] = "food",[2] = "healing_apple",[3] = {["buy_count"] = 1}}                                   
                                    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
                                    task.wait(1)
                                    for num_Heal_apple, i_Heal_apple in pairs(playerData.inventory.food) do
                                        if i_Heal_apple.kind == 'healing_apple' then
                                            local args = {[1] = "__Enum_PetObjectCreatorType_2",[2] = {["pet_unique"] = _G.Pet,["unique_id"] = num_Heal_apple}}                                           
                                            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/CreatePetObject"):InvokeServer(unpack(args))
                                            local args = {[1] = workspace:WaitForChild("Pets"):GetChildren()[1],[2] = workspace.PetObjects:GetChildren()[1]}
                                            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/GrabPetObject"):FireServer(unpack(args))
                                            local args = {[1] = workspace.PetObjects:GetChildren()[1],[2] = _G.Pet}                                                       
                                            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/ConsumeFoodObject"):FireServer(unpack(args))
                                            break
                                        end
                                    end
                                    task.wait(8)
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'walk' then
                                    TaskDetecter.Text = "Task: Walk"..utf8.char(0x1F6B6) .. utf8.char(0x200D) .. utf8.char(0x2642) .. utf8.char(0xFE0F) .. utf8.char(0x27A1)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TeleportToPlatform("MainPlatform")
                                    ReEquipPet()
                                    task.wait(1)
                                    HoldPet()
                                    local RunService = game:GetService("RunService")
                                    local Character = game.Players.LocalPlayer.Character
                                    local Humanoid = Character:FindFirstChildOfClass("Humanoid")

                                    local startTime = tick()
                                    local angle = 0

                                    local function onStepped()
                                        if tick() - startTime < 35 then
                                            angle = (angle + 0.07) % (2*math.pi)
                                            local radius = 5
                                            local x = math.cos(angle) * radius
                                            local z = math.sin(angle) * radius
                                            Humanoid:Move(Vector3.new(x, 0, z))
                                            HoldPet()
                                        else
                                            RunService:UnbindFromRenderStep("AutoRun")
                                        end
                                    end
                                    RunService:BindToRenderStep("AutoRun", Enum.RenderPriority.Input.Value, onStepped)
                                    task.wait(40)
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'ride' then
                                    TaskDetecter.Text = "Task: Ride"..utf8.char(0x1F697)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TeleportToPlatform("MainPlatform")
                                    ReEquipPet()
                                    task.wait(1)
                                    HoldPet()
                                    task.wait(.5)
                                    for num, i in pairs(playerData.inventory.strollers) do
                                        if i.kind == 'stroller-default' then
                                            _G.DefStroller = num
                                        end
                                    end
                                    local args = {
                                        [1] = _G.DefStroller,
                                        [2] = {
                                            ["use_sound_delay"] = true,
                                            ["equip_as_last"] = false
                                        }
                                    }
                                    
                                    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(unpack(args))
                                    task.wait(.1)
                                    local PlrHumanoid = game.Players.LocalPlayer.Character.Humanoid
                                    PlrHumanoid.JumpPower = 200
                                    for i = 1, 16 do
                                        PlrHumanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                                        local args = {
                                            [1] = game.workspace:WaitForChild("Pets"):GetChildren()[1] or game.workspace:WaitForChild("Pets"):FindFirstChild(_G.PetKind),
                                            [2] = game:GetService("Players").LocalPlayer.Character.StrollerTool.ModelHandle.TouchToSits.TouchToSit
                                        }
                                        
                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("AdoptAPI/UseStroller"):InvokeServer(unpack(args))          
                                        wait(2)
                                    end
                                    task.wait(.1)
                                    local args = {
                                        [1] = _G.DefStroller
                                    }
                                    
                                    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Unequip"):InvokeServer(unpack(args))
                                    PlrHumanoid.JumpPower = 50
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'school' then
                                    TaskDetecter.Text = "Task: School"..utf8.char(0x1F3EB)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TeleportToPlatform("MainPlatform")
                                    DownloadAPIWinterShow()
                                    ReEquipPet()
                                    task.wait(1)
                                    HoldPet()
                                    local args = {[1] = "School"}                                   
                                    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("LocationAPI/SetLocation"):FireServer(unpack(args))
                                    task.wait(50)
                                    DownloadAPIWinterShow()
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'salon' then
                                    TaskDetecter.Text = "Task: Salon"..utf8.char(0x1F486) .. utf8.char(0x200D) .. utf8.char(0x2640)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TeleportToPlatform("MainPlatform")
                                    DownloadAPIWinterShow()
                                    ReEquipPet()
                                    task.wait(1)
                                    HoldPet()
                                    task.wait(.1)
                                    local args = {
                                        [1] = "Salon"
                                    }
                                    
                                    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("LocationAPI/SetLocation"):FireServer(unpack(args))
                                    task.wait(50)
                                    DownloadAPIWinterShow()
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'bored' then
                                    TaskDetecter.Text = "Task: Bored"..utf8.char(0x1F6DD)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TeleportToPlatform("BoredPlatform")
                                    DownloadAPIWinterShow()
                                    ReEquipPet()
                                    task.wait(1)
                                    HoldPet()
                                    task.wait(50)
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'camping' then
                                    TaskDetecter.Text = "Task: Camping"..utf8.char(0x26FA)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TeleportToPlatform("CampingPlatform")
                                    DownloadAPIWinterShow()
                                    ReEquipPet()
                                    task.wait(1)
                                    HoldPet()
                                    task.wait(50)
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'beach_party' then
                                    TaskDetecter.Text = "Task: Beach party"..utf8.char(0x1F3D6) .. utf8.char(0xFE0F)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TeleportToPlatform("BeachPlatform")
                                    DownloadAPIWinterShow()
                                    ReEquipPet()
                                    task.wait(1)
                                    HoldPet()
                                    task.wait(50)
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif string.find(num_pets, 'mystery') then
                                    TaskDetecter.Text = "Task: Mystery"..utf8.char(0x1F52E)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    for num_4, i_4 in pairs(Tasks) do
                                        local args = {
                                            [1] = num_pets,
                                            [2] = 1,
                                            [3] = i_4
                                        }
                                        
                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("AilmentsAPI/ChooseMysteryAilment"):FireServer(unpack(args))
                                        task.wait(3)
                                    end
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'moon' then
                                    TaskDetecter.Text = "Task: moon"..utf8.char(0x1F311)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    TeleportToPlatform("MainPlatform")
                                    DownloadAPIWinterShow()
                                    ReEquipPet()
                                    task.wait(1)
                                    HoldPet()
                                    local args = {[1] = "MoonInterior"}                                   
                                    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("LocationAPI/SetLocation"):FireServer(unpack(args))
                                    task.wait(50)
                                    DownloadAPIWinterShow()
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                elseif num_pets == 'pet_me' then
                                    TaskDetecter.Text = "Task: pet me"..utf8.char(0x1F44B) .. utf8.char(0x2764)
                                    print("Task: "..num_pets.." Detected!"..utf8.char(0x26A1))
                                    for i = 1,5 do
                                        DropPet()
                                        task.wait(1)
                                        local args = {[1] = game.workspace:WaitForChild("Pets"):GetChildren()[1] or game.workspace:WaitForChild("Pets"):FindFirstChild(_G.PetKind)} 
                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("AdoptAPI/FocusPet"):FireServer(unpack(args))
                                        local args = {[1] = game.workspace:WaitForChild("Pets"):GetChildren()[1] or game.workspace:WaitForChild("Pets"):FindFirstChild(_G.PetKind),[2] = {["FocusPet"] = true}}   
                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/ReplicateActivePerformances"):FireServer(unpack(args))
                                        task.wait(2)
                                        local args = {[1] = _G.Pet}                                   
                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("AilmentsAPI/ProgressPetMeAilment"):FireServer(unpack(args))
                                    end
                                    print("Task: "..num_pets.." Completed!"..utf8.char(0x2705))
                                end
                            end
                        end
                    end
                    if num_2 == 'baby_ailments' then
                        for num_baby, i_baby in pairs(i_2) do
                            if num_baby == 'dirty' then
                                TaskDetecter.Text = "Task: Dirty"..utf8.char(0x1F6BF)
                                print("Task: "..num_baby.." Detected!"..utf8.char(0x26A1))
                                ReEquipPet()
                                local statusFurniture = true
                                local function onStepped()
                                    if statusFurniture == true then
                                        task.wait(11)
                                        local args = {[1] = workspace:WaitForChild("PlayerCharacters"):WaitForChild(game.Players.LocalPlayer.Name)}        
                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("AdoptAPI/MakeBabyJumpOutOfSeat"):FireServer(unpack(args))
                                    else
                                        RunService:UnbindFromRenderStep("JumpBaby")
                                    end
                                end
                                RunService:BindToRenderStep("JumpBaby", Enum.RenderPriority.Input.Value, onStepped)
                                ActivateFurniture(ModernShower, "UseBlock", "baby")
                                statusFurniture = false
                                print("Task: "..num_baby.." Completed!"..utf8.char(0x2705))
                            elseif num_baby == 'sleepy' then
                                TaskDetecter.Text = "Task: Sleepy"..utf8.char(0x1F4A4)
                                print("Task: "..num_baby.." Detected!"..utf8.char(0x26A1))
                                ReEquipPet()
                                local statusFurniture = true
                                local function onStepped()
                                    if statusFurniture == true then
                                        task.wait(18)
                                        local args = {[1] = workspace:WaitForChild("PlayerCharacters"):WaitForChild(game.Players.LocalPlayer.Name)}        
                                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("AdoptAPI/MakeBabyJumpOutOfSeat"):FireServer(unpack(args))
                                    else
                                        RunService:UnbindFromRenderStep("JumpBaby2")
                                    end
                                end
                                RunService:BindToRenderStep("JumpBaby2", Enum.RenderPriority.Input.Value, onStepped)
                                ActivateFurniture(BasicCrib, "UseBlock", "baby")
                                statusFurniture = false
                                print("Task: "..num_baby.." Completed!"..utf8.char(0x2705))
                            elseif num_baby == 'hungry' then
                                TaskDetecter.Text = "Task: Hungry"..utf8.char(0x1F374)
                                print("Task: "..num_baby.." Detected!"..utf8.char(0x26A1))
                                local args = {[1] = "food",[2] = "apple",[3] = {["buy_count"] = 1}}
                                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
                                for num_3, i_3 in pairs(playerData.inventory.food) do
                                    if i_3.kind == 'apple' then
                                        for i = 1,5 do
                                            local args = {[1] = num_3,[2] = "END"}                                        
                                            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/ServerUseTool"):FireServer(unpack(args))
                                        end
                                        break
                                    end
                                end
                                print("Task: "..num_baby.." Completed!"..utf8.char(0x2705))
                            elseif num_baby == 'thirsty' then
                                TaskDetecter.Text = "Task: Thirsty"..utf8.char(0x1F4A6)
                                print("Task: "..num_baby.." Detected!"..utf8.char(0x26A1))
                                local args = {[1] = "food",[2] = "water",[3] = {["buy_count"] = 1}}
                                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
                                for num_3, i_3 in pairs(playerData.inventory.food) do
                                    if i_3.kind == 'water' then
                                        for i = 1,10 do
                                            task.wait(.1)
                                            local args = {[1] = num_3,[2] = "END"}                                        
                                            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/ServerUseTool"):FireServer(unpack(args))
                                        end
                                        break
                                    end
                                end
                                print("Task: "..num_baby.." Completed!"..utf8.char(0x2705))
                            elseif num_baby == 'sick' then
                                TaskDetecter.Text = "Task: Sick"..utf8.char(0x1F637)
                                print("Task: "..num_baby.." Detected!"..utf8.char(0x26A1))
                                local args = {[1] = "food",[2] = "healing_apple",[3] = {["buy_count"] = 1}}                                   
                                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
                                for num_3, i_3 in pairs(playerData.inventory.food) do
                                    if i_3.kind == 'healing_apple' then
                                        for i = 1,3 do
                                            local args = {[1] = num_3,[2] = "END"}                                        
                                            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/ServerUseTool"):FireServer(unpack(args))
                                        end
                                        break
                                    end
                                end
                                print("Task: "..num_baby.." Completed!"..utf8.char(0x2705))
                            end
                        end
                    end
                end
            end
        end
    end)
end
